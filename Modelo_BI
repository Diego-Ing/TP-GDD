USE GD1C2025;
GO

PRINT 'Iniciando limpieza de tablas y vistas de BI existentes.';

-- Eliminar vistas
IF OBJECT_ID('DB_SQUAD.BI_GananciasPorMesSucursal', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_GananciasPorMesSucursal;
IF OBJECT_ID('DB_SQUAD.BI_FacturaPromedioMensualPorProvinciaCuatrimestre', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_FacturaPromedioMensualPorProvinciaCuatrimestre;
IF OBJECT_ID('DB_SQUAD.BI_RendimientoModelosTop3', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_RendimientoModelosTop3;
IF OBJECT_ID('DB_SQUAD.BI_VolumenPedidosPorTurnoSucursalMes', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_VolumenPedidosPorTurnoSucursalMes;
IF OBJECT_ID('DB_SQUAD.BI_ConversionPedidosPorEstadoCuatrimestreSucursal', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_ConversionPedidosPorEstadoCuatrimestreSucursal;
IF OBJECT_ID('DB_SQUAD.BI_TiempoPromedioFabricacionPorCuatrimestre', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_TiempoPromedioFabricacionPorCuatrimestre;
IF OBJECT_ID('DB_SQUAD.BI_PromedioComprasPorMes', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_PromedioComprasPorMes;
IF OBJECT_ID('DB_SQUAD.BI_ComprasPorTipoMaterialSucursalCuatrimestre', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_ComprasPorTipoMaterialSucursalCuatrimestre;
IF OBJECT_ID('DB_SQUAD.BI_PorcentajeCumplimientoEnvios', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_PorcentajeCumplimientoEnvios;
IF OBJECT_ID('DB_SQUAD.BI_LocalidadesMayorCostoEnvio', 'V') IS NOT NULL DROP VIEW DB_SQUAD.BI_LocalidadesMayorCostoEnvio;

PRINT 'Vistas de BI eliminadas si existían.';
GO

-- Eliminar tablas de hechos 
IF OBJECT_ID('DB_SQUAD.BI_FactVentasComprasEnvios', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_FactVentasComprasEnvios;
IF OBJECT_ID('DB_SQUAD.BI_FactPedidos', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_FactPedidos;
IF OBJECT_ID('DB_SQUAD.BI_FactVentas', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_FactVentas;
IF OBJECT_ID('DB_SQUAD.BI_FactCompras', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_FactCompras;
IF OBJECT_ID('DB_SQUAD.BI_FactEnvios', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_FactEnvios;


-- Eliminar tablas de dimensiones 
IF OBJECT_ID('DB_SQUAD.BI_Tiempo', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_Tiempo;
IF OBJECT_ID('DB_SQUAD.BI_Ubicacion', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_Ubicacion;
IF OBJECT_ID('DB_SQUAD.BI_RangoEtario', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_RangoEtario;
IF OBJECT_ID('DB_SQUAD.BI_TurnoVentas', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_TurnoVentas;
IF OBJECT_ID('DB_SQUAD.BI_TipoMaterial', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_TipoMaterial;
IF OBJECT_ID('DB_SQUAD.BI_ModeloSillon', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_ModeloSillon;
IF OBJECT_ID('DB_SQUAD.BI_EstadoPedido', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_EstadoPedido;
IF OBJECT_ID('DB_SQUAD.BI_Sucursal', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_Sucursal;
IF OBJECT_ID('DB_SQUAD.BI_Cliente', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_Cliente;
IF OBJECT_ID('DB_SQUAD.BI_Proveedor', 'U') IS NOT NULL DROP TABLE DB_SQUAD.BI_Proveedor;

PRINT 'Tablas de BI eliminadas si existían.';

PRINT 'Comenzando la creación de tablas y vistas de BI.';

GO

-- Creación de Tablas de Dimensiones

CREATE TABLE DB_SQUAD.BI_Tiempo (
    tiempo_id INT IDENTITY(1,1) PRIMARY KEY,
    anio INT NOT NULL,
    cuatrimestre INT NOT NULL,
    mes INT NOT NULL,
    CONSTRAINT UQ_BI_Tiempo UNIQUE (anio, mes)
);
PRINT 'Tabla DB_SQUAD.BI_Tiempo creada.';
GO

CREATE TABLE DB_SQUAD.BI_Ubicacion (
    ubicacion_id INT IDENTITY(1,1) PRIMARY KEY,
    provincia_nombre NVARCHAR(255) NOT NULL,
    localidad_nombre NVARCHAR(255) NOT NULL,
    CONSTRAINT UQ_BI_Ubicacion UNIQUE (provincia_nombre, localidad_nombre)
);
PRINT 'Tabla DB_SQUAD.BI_Ubicacion creada.';
GO

CREATE TABLE DB_SQUAD.BI_RangoEtario (
    rango_etario_id INT IDENTITY(1,1) PRIMARY KEY,
    rango_etario_descripcion VARCHAR(10) NOT NULL UNIQUE
);
PRINT 'Tabla DB_SQUAD.BI_RangoEtario creada.';
GO

CREATE TABLE DB_SQUAD.BI_TurnoVentas (
    turno_id INT IDENTITY(1,1) PRIMARY KEY,
    turno_descripcion VARCHAR(20) NOT NULL UNIQUE
);
PRINT 'Tabla DB_SQUAD.BI_TurnoVentas creada.';
GO

CREATE TABLE DB_SQUAD.BI_TipoMaterial (
    tipo_material_id INT IDENTITY(1,1) PRIMARY KEY,
    tipo_material_descripcion NVARCHAR(50) NOT NULL UNIQUE
);
PRINT 'Tabla DB_SQUAD.BI_TipoMaterial creada.';
GO

CREATE TABLE DB_SQUAD.BI_ModeloSillon (
    modelo_id BIGINT PRIMARY KEY,
    modelo_descripcion NVARCHAR(100),
    modelo_precio_base DECIMAL(12,2)
);
PRINT 'Tabla DB_SQUAD.BI_ModeloSillon creada';
GO

CREATE TABLE DB_SQUAD.BI_EstadoPedido (
    estado_id CHAR(1) PRIMARY KEY,
    estado_nombre VARCHAR(10) NOT NULL UNIQUE
);
PRINT 'Tabla DB_SQUAD.BI_EstadoPedido creada.';
GO

CREATE TABLE DB_SQUAD.BI_Sucursal (
    sucursal_bi_id INT IDENTITY(1,1) PRIMARY KEY,
    sucursal_id_transaccional INT NOT NULL UNIQUE,
    sucursal_numero_maestra BIGINT NULL,
    sucursal_mail NVARCHAR(50) NULL,
    sucursal_direccion_nombre NVARCHAR(255) NULL,
    sucursal_localidad_nombre NVARCHAR(255) NULL,
    sucursal_provincia_nombre NVARCHAR(255) NULL
);
PRINT 'Tabla DB_SQUAD.BI_Sucursal creada';
GO

CREATE TABLE DB_SQUAD.BI_Cliente (
    cliente_bi_id INT IDENTITY(1,1) PRIMARY KEY,
    cliente_id_transaccional INT NOT NULL UNIQUE,
    cliente_dni NVARCHAR(20) NULL,
    cliente_nombre_completo NVARCHAR(511) NULL,
    cliente_rango_etario_id INT,
    FOREIGN KEY (cliente_rango_etario_id) REFERENCES DB_SQUAD.BI_RangoEtario(rango_etario_id)
);
PRINT 'Tabla DB_SQUAD.BI_Cliente creada';
GO

CREATE TABLE DB_SQUAD.BI_Proveedor (
    proveedor_bi_id INT IDENTITY(1,1) PRIMARY KEY,
    proveedor_id_transaccional INT NOT NULL UNIQUE,
    proveedor_cuit NVARCHAR(20) NOT NULL,
    proveedor_razon_social NVARCHAR(255) NULL
);
PRINT 'Tabla DB_SQUAD.BI_Proveedor creada.';
GO

-- INICIO DE LAS NUEVAS TABLAS DE HECHOS 

-- Hechos de Pedidos
CREATE TABLE DB_SQUAD.BI_FactPedidos (
    fact_pedido_sk BIGINT IDENTITY(1,1) PRIMARY KEY,
    tiempo_id INT NOT NULL,
    sucursal_id INT NULL,
    cliente_id INT NULL,
    rango_etario_id INT NULL,
    turno_ventas_id INT NULL,
    modelo_sillon_id BIGINT NULL,
    estado_pedido_id CHAR(1) NULL,
    CantidadPedidos INT NOT NULL,
    CantidadItemsPedido INT NOT NULL,
    TotalMontoPedidos DECIMAL(18,2) NOT NULL,

    FOREIGN KEY (tiempo_id) REFERENCES DB_SQUAD.BI_Tiempo(tiempo_id),
    FOREIGN KEY (sucursal_id) REFERENCES DB_SQUAD.BI_Sucursal(sucursal_bi_id),
    FOREIGN KEY (cliente_id) REFERENCES DB_SQUAD.BI_Cliente(cliente_bi_id),
    FOREIGN KEY (rango_etario_id) REFERENCES DB_SQUAD.BI_RangoEtario(rango_etario_id),
    FOREIGN KEY (turno_ventas_id) REFERENCES DB_SQUAD.BI_TurnoVentas(turno_id),
    FOREIGN KEY (modelo_sillon_id) REFERENCES DB_SQUAD.BI_ModeloSillon(modelo_id),
    FOREIGN KEY (estado_pedido_id) REFERENCES DB_SQUAD.BI_EstadoPedido(estado_id)
);
PRINT 'Tabla DB_SQUAD.BI_FactPedidos creada';
GO

-- Hechos de Ventas 
CREATE TABLE DB_SQUAD.BI_FactVentas (
    fact_venta_sk BIGINT IDENTITY(1,1) PRIMARY KEY,
    tiempo_id INT NOT NULL,
    modelo_sillon_id BIGINT NULL, 
    CantidadFacturas INT NOT NULL,
    TotalIngresos DECIMAL(18,2) NOT NULL,
    CantidadItemsVendidos INT NOT NULL,

    FOREIGN KEY (tiempo_id) REFERENCES DB_SQUAD.BI_Tiempo(tiempo_id),
    FOREIGN KEY (modelo_sillon_id) REFERENCES DB_SQUAD.BI_ModeloSillon(modelo_id)
);
PRINT 'Tabla DB_SQUAD.BI_FactVentas creada.';
GO

-- Hechos de Compras 
CREATE TABLE DB_SQUAD.BI_FactCompras (
    fact_compra_sk BIGINT IDENTITY(1,1) PRIMARY KEY,
    tiempo_id INT NOT NULL,
    proveedor_id INT NULL,
    tipo_material_id INT NULL,
    TotalEgresos DECIMAL(18,2) NOT NULL,
    CantidadItemsComprados INT NOT NULL,

    FOREIGN KEY (tiempo_id) REFERENCES DB_SQUAD.BI_Tiempo(tiempo_id),
    FOREIGN KEY (proveedor_id) REFERENCES DB_SQUAD.BI_Proveedor(proveedor_bi_id),
    FOREIGN KEY (tipo_material_id) REFERENCES DB_SQUAD.BI_TipoMaterial(tipo_material_id)
);
PRINT 'Tabla DB_SQUAD.BI_FactCompras creada.';
GO

-- Hechos de Envíos 
CREATE TABLE DB_SQUAD.BI_FactEnvios (
    fact_envio_sk BIGINT IDENTITY(1,1) PRIMARY KEY,
    tiempo_id INT NOT NULL, 
    TotalCostoEnvio DECIMAL(18,2) NOT NULL,
    CantidadEnvios INT NOT NULL,
    CantidadEnviosCumplidos INT NOT NULL,
    TiempoPromedioEntregaDias DECIMAL(18,2) NULL,

    FOREIGN KEY (tiempo_id) REFERENCES DB_SQUAD.BI_Tiempo(tiempo_id)
);
PRINT 'Tabla DB_SQUAD.BI_FactEnvios creada.';
GO

-- FIN DE LAS NUEVAS TABLAS DE HECHOS



PRINT 'Comenzando la migración de datos a las tablas de BI.';


-- Migración de datos a Dimensiones

INSERT INTO DB_SQUAD.BI_Tiempo (anio, cuatrimestre, mes)
SELECT DISTINCT
    YEAR(Fecha) AS anio,
    CEILING(MONTH(Fecha) / 3.0) AS cuatrimestre,
    MONTH(Fecha) AS mes
FROM (
    SELECT fact_fecha AS Fecha FROM DB_SQUAD.Factura WHERE fact_fecha IS NOT NULL
    UNION ALL
    SELECT pedido_fecha AS Fecha FROM DB_SQUAD.Pedido WHERE pedido_fecha IS NOT NULL
    UNION ALL
    SELECT compra_fecha AS Fecha FROM DB_SQUAD.Compra WHERE compra_fecha IS NOT NULL
    UNION ALL
    SELECT envio_fecha_programada AS Fecha FROM DB_SQUAD.Envio WHERE envio_fecha_programada IS NOT NULL
    UNION ALL
    SELECT envio_fecha_entrega AS Fecha FROM DB_SQUAD.Envio WHERE envio_fecha_entrega IS NOT NULL
) AS FechasUnicas
WHERE Fecha IS NOT NULL;
PRINT 'Datos migrados a DB_SQUAD.BI_Tiempo.';
GO

INSERT INTO DB_SQUAD.BI_Ubicacion (provincia_nombre, localidad_nombre)
SELECT DISTINCT
    p.provincia_nombre,
    l.localidad_nombre
FROM DB_SQUAD.Localidad l
JOIN DB_SQUAD.Provincia p ON l.localidad_provincia = p.provincia_codigo;
PRINT 'Datos migrados a DB_SQUAD.BI_Ubicacion.';
GO

INSERT INTO DB_SQUAD.BI_RangoEtario (rango_etario_descripcion) VALUES
('<25'),
('25-35'),
('35-50'),
('>50');
PRINT 'Datos migrados a DB_SQUAD.BI_RangoEtario.';
GO

INSERT INTO DB_SQUAD.BI_TurnoVentas (turno_descripcion) VALUES
('08:00-14:00'),
('14:00-20:00');
PRINT 'Datos migrados a DB_SQUAD.BI_TurnoVentas.';
GO

INSERT INTO DB_SQUAD.BI_TipoMaterial (tipo_material_descripcion) VALUES
('Tela'),
('Madera'),
('Relleno');
PRINT 'Datos migrados a DB_SQUAD.BI_TipoMaterial.';
GO

INSERT INTO DB_SQUAD.BI_ModeloSillon (modelo_id, modelo_descripcion, modelo_precio_base)
SELECT modelo_codigo, modelo_descripcion, modelo_precio_base
FROM DB_SQUAD.Modelo;
PRINT 'Datos migrados a DB_SQUAD.BI_ModeloSillon.';
GO

INSERT INTO DB_SQUAD.BI_EstadoPedido (estado_id, estado_nombre)
SELECT estado_id, estado_nombre
FROM DB_SQUAD.EstadoPedido;
PRINT 'Datos migrados a DB_SQUAD.BI_EstadoPedido.';
GO

INSERT INTO DB_SQUAD.BI_Sucursal (sucursal_id_transaccional, sucursal_numero_maestra, sucursal_mail, sucursal_direccion_nombre, sucursal_localidad_nombre, sucursal_provincia_nombre)
SELECT
    s.sucursal_id,
    s.sucursal_numero_maestra,
    s.sucursal_mail,
    d.direccion_nombre,
    l.localidad_nombre,
    p.provincia_nombre
FROM DB_SQUAD.Sucursal s
LEFT JOIN DB_SQUAD.Direccion d ON s.sucursal_direccion = d.direccion_codigo
LEFT JOIN DB_SQUAD.Localidad l ON d.direccion_localidad = l.localidad_codigo
LEFT JOIN DB_SQUAD.Provincia p ON l.localidad_provincia = p.provincia_codigo;
PRINT 'Datos migrados a DB_SQUAD.BI_Sucursal.';
GO

INSERT INTO DB_SQUAD.BI_Cliente (cliente_id_transaccional, cliente_dni, cliente_nombre_completo, cliente_rango_etario_id)
SELECT
    c.Cliente_ID,
    c.Cliente_Dni,
    c.Cliente_Nombre + ' ' + c.Cliente_Apellido,
    CASE
        WHEN DATEDIFF(year, c.Cliente_FechaNacimiento, GETDATE()) < 25 THEN (SELECT rango_etario_id FROM DB_SQUAD.BI_RangoEtario WHERE rango_etario_descripcion = '<25')
        WHEN DATEDIFF(year, c.Cliente_FechaNacimiento, GETDATE()) BETWEEN 25 AND 35 THEN (SELECT rango_etario_id FROM DB_SQUAD.BI_RangoEtario WHERE rango_etario_descripcion = '25-35')
        WHEN DATEDIFF(year, c.Cliente_FechaNacimiento, GETDATE()) BETWEEN 36 AND 50 THEN (SELECT rango_etario_id FROM DB_SQUAD.BI_RangoEtario WHERE rango_etario_descripcion = '35-50')
        WHEN DATEDIFF(year, c.Cliente_FechaNacimiento, GETDATE()) > 50 THEN (SELECT rango_etario_id FROM DB_SQUAD.BI_RangoEtario WHERE rango_etario_descripcion = '>50')
        ELSE NULL
    END
FROM DB_SQUAD.Cliente c;
PRINT 'Datos migrados a DB_SQUAD.BI_Cliente.';
GO

INSERT INTO DB_SQUAD.BI_Proveedor (proveedor_id_transaccional, proveedor_cuit, proveedor_razon_social)
SELECT proveedor_id, proveedor_cuit, proveedor_razon_social
FROM DB_SQUAD.Proveedor;
PRINT 'Datos migrados a DB_SQUAD.BI_Proveedor.';
GO

-- INICIO DE MIGRACIÓN DE DATOS A LAS NUEVAS TABLAS DE HECHOS


-- Migración a BI_FactPedidos 
INSERT INTO DB_SQUAD.BI_FactPedidos (
    tiempo_id,
    sucursal_id,
    cliente_id,
    rango_etario_id,
    turno_ventas_id,
    modelo_sillon_id,
    estado_pedido_id,
    CantidadPedidos,
    CantidadItemsPedido,
    TotalMontoPedidos
)
SELECT
    t.tiempo_id,
    bs.sucursal_bi_id,
    bc.cliente_bi_id,
    bre.rango_etario_id,
    btv.turno_id,
    bms.modelo_id,
    bep.estado_id,
    COUNT(DISTINCT p.pedido_codigo) AS CantidadPedidos,
    SUM(ip.item_pedido_cantidad) AS CantidadItemsPedido,
    SUM(p.pedido_total) AS TotalMontoPedidos
FROM DB_SQUAD.Pedido p
JOIN DB_SQUAD.BI_Tiempo t ON YEAR(p.pedido_fecha) = t.anio AND MONTH(p.pedido_fecha) = t.mes
LEFT JOIN DB_SQUAD.BI_Sucursal bs ON p.pedido_sucursal = bs.sucursal_id_transaccional
LEFT JOIN DB_SQUAD.BI_Cliente bc ON p.pedido_cliente = bc.cliente_id_transaccional
LEFT JOIN DB_SQUAD.BI_RangoEtario bre ON bc.cliente_rango_etario_id = bre.rango_etario_id
LEFT JOIN DB_SQUAD.BI_TurnoVentas btv ON
    CASE
        WHEN DATEPART(HOUR, p.pedido_fecha) >= 8 AND DATEPART(HOUR, p.pedido_fecha) < 14 THEN '08:00-14:00'
        WHEN DATEPART(HOUR, p.pedido_fecha) >= 14 AND DATEPART(HOUR, p.pedido_fecha) < 20 THEN '14:00-20:00'
        ELSE NULL
    END = btv.turno_descripcion
LEFT JOIN DB_SQUAD.ItemPedido ip ON p.pedido_codigo = ip.item_pedido_codigo
LEFT JOIN DB_SQUAD.Sillon s ON ip.item_pedido_sillon = s.sillon_id
LEFT JOIN DB_SQUAD.BI_ModeloSillon bms ON s.sillon_modelo = bms.modelo_id
LEFT JOIN DB_SQUAD.BI_EstadoPedido bep ON p.pedido_estado = bep.estado_id
WHERE p.pedido_codigo IS NOT NULL
GROUP BY
    t.tiempo_id,
    bs.sucursal_bi_id,
    bc.cliente_bi_id,
    bre.rango_etario_id,
    btv.turno_id,
    bms.modelo_id,
    bep.estado_id;
PRINT 'Datos migrados a DB_SQUAD.BI_FactPedidos.';
GO

-- Migración a BI_FactVentas 
INSERT INTO DB_SQUAD.BI_FactVentas (
    tiempo_id,
    modelo_sillon_id,
    CantidadFacturas,
    TotalIngresos,
    CantidadItemsVendidos
)
SELECT
    t.tiempo_id,
    bms.modelo_id,
    COUNT(DISTINCT f.factura_codigo) AS CantidadFacturas,
    SUM(f.fact_total) AS TotalIngresos,
    SUM(ifac.item_fact_cantidad) AS CantidadItemsVendidos
FROM DB_SQUAD.Factura f
JOIN DB_SQUAD.BI_Tiempo t ON YEAR(f.fact_fecha) = t.anio AND MONTH(f.fact_fecha) = t.mes
LEFT JOIN DB_SQUAD.ItemFactura ifac ON f.factura_codigo = ifac.item_fact_codigo
LEFT JOIN DB_SQUAD.Sillon s ON ifac.item_fact_sillon = s.sillon_id
LEFT JOIN DB_SQUAD.BI_ModeloSillon bms ON s.sillon_modelo = bms.modelo_id
WHERE f.factura_codigo IS NOT NULL
GROUP BY
    t.tiempo_id,
    bms.modelo_id;
PRINT 'Datos migrados a DB_SQUAD.BI_FactVentas.';
GO

-- Migración a BI_FactCompras
INSERT INTO DB_SQUAD.BI_FactCompras (
    tiempo_id,
    proveedor_id,
    tipo_material_id,
    TotalEgresos,
    CantidadItemsComprados
)
SELECT
    t.tiempo_id,
    bp.proveedor_bi_id,
    btm.tipo_material_id,
    SUM(c.compra_total) AS TotalEgresos,
    SUM(ic.item_compra_cantidad) AS CantidadItemsComprados
FROM DB_SQUAD.Compra c
JOIN DB_SQUAD.BI_Tiempo t ON YEAR(c.compra_fecha) = t.anio AND MONTH(c.compra_fecha) = t.mes
LEFT JOIN DB_SQUAD.BI_Proveedor bp ON c.compra_proveedor = bp.proveedor_id_transaccional
LEFT JOIN DB_SQUAD.ItemCompra ic ON c.compra_codigo = ic.item_compra_codigo
LEFT JOIN DB_SQUAD.ItemMaterial im ON ic.item_compra_sillon = im.item_material_sillon
LEFT JOIN DB_SQUAD.Material m_transaccional ON im.item_material_material = m_transaccional.material_codigo
LEFT JOIN DB_SQUAD.BI_TipoMaterial btm ON
    CASE
        WHEN m_transaccional.material_descripcion LIKE '%relleno%' THEN 'Relleno'
        WHEN m_transaccional.material_descripcion LIKE '%madera%' THEN 'Madera'
        WHEN m_transaccional.material_descripcion LIKE '%tela%' THEN 'Tela'
        ELSE NULL
    END = btm.tipo_material_descripcion
WHERE c.compra_codigo IS NOT NULL
GROUP BY
    t.tiempo_id,
    bp.proveedor_bi_id,
    btm.tipo_material_id;
PRINT 'Datos migrados a DB_SQUAD.BI_FactCompras.';
GO

-- Migración a BI_FactEnvios 
INSERT INTO DB_SQUAD.BI_FactEnvios (
    tiempo_id,
    TotalCostoEnvio,
    CantidadEnvios,
    CantidadEnviosCumplidos,
    TiempoPromedioEntregaDias
)
SELECT
    t.tiempo_id,
    SUM(e.envio_total) AS TotalCostoEnvio,
    COUNT(e.envio_codigo) AS CantidadEnvios,
    SUM(CASE WHEN e.envio_fecha_entrega <= e.envio_fecha_programada THEN 1 ELSE 0 END) AS CantidadEnviosCumplidos,
    AVG(CAST(DATEDIFF(day, e.envio_fecha_programada, e.envio_fecha_entrega) AS DECIMAL(18,2))) AS TiempoPromedioEntregaDias
FROM DB_SQUAD.Envio e
JOIN DB_SQUAD.BI_Tiempo t ON YEAR(e.envio_fecha_programada) = t.anio AND MONTH(e.envio_fecha_programada) = t.mes
WHERE e.envio_codigo IS NOT NULL
GROUP BY
    t.tiempo_id;
PRINT 'Datos migrados a DB_SQUAD.BI_FactEnvios.';
GO

-- FIN DE MIGRACIÓN DE DATOS A LAS NUEVAS TABLAS DE HECHOS


PRINT 'creación de vistas para consultas de negocio';

GO

-- Vistas para Consultas de Negocio
CREATE VIEW DB_SQUAD.BI_GananciasPorMes AS
SELECT
    t.anio,
    t.mes,
    ISNULL(SUM(fv.TotalIngresos), 0) AS TotalIngresos,
    ISNULL(SUM(fc.TotalEgresos), 0) AS TotalEgresos,
    ISNULL(SUM(fv.TotalIngresos), 0) - ISNULL(SUM(fc.TotalEgresos), 0) AS GananciaNeta
FROM DB_SQUAD.BI_Tiempo t
LEFT JOIN DB_SQUAD.BI_FactVentas fv ON t.tiempo_id = fv.tiempo_id
LEFT JOIN DB_SQUAD.BI_FactCompras fc ON t.tiempo_id = fc.tiempo_id
GROUP BY
    t.anio,
    t.mes;
GO
PRINT 'Vista DB_SQUAD.BI_GananciasPorMes creada .';
GO

-- 2. Factura promedio mensual. 
CREATE VIEW DB_SQUAD.BI_FacturaPromedioCuatrimestre AS
SELECT
    t.anio,
    t.cuatrimestre,
    SUM(fv.TotalIngresos) AS SumaImporteFacturas,
    SUM(fv.CantidadFacturas) AS TotalFacturas,
    CASE
        WHEN SUM(fv.CantidadFacturas) > 0 THEN SUM(fv.TotalIngresos) / SUM(fv.CantidadFacturas)
        ELSE 0
    END AS FacturaPromedio
FROM DB_SQUAD.BI_FactVentas fv
JOIN DB_SQUAD.BI_Tiempo t ON fv.tiempo_id = t.tiempo_id
GROUP BY
    t.anio,
    t.cuatrimestre;
GO
PRINT 'Vista DB_SQUAD.BI_FacturaPromedioCuatrimestre creada (adaptada).';
GO

-- 3. Rendimiento de modelos
CREATE VIEW DB_SQUAD.BI_RendimientoModelosTop3 AS
WITH ModeloVentas AS (
    SELECT
        t.anio,
        t.cuatrimestre,
        usuc.localidad_nombre AS LocalidadSucursal,
        bre.rango_etario_descripcion AS RangoEtarioCliente,
        bms.modelo_descripcion AS ModeloSillon,
        SUM(fp.CantidadItemsPedido) AS CantidadVendida,
        ROW_NUMBER() OVER (PARTITION BY t.anio, t.cuatrimestre, usuc.localidad_nombre, bre.rango_etario_descripcion ORDER BY SUM(fp.CantidadItemsPedido) DESC) as rn
    FROM DB_SQUAD.BI_FactPedidos fp
    JOIN DB_SQUAD.BI_Tiempo t ON fp.tiempo_id = t.tiempo_id
    JOIN DB_SQUAD.BI_ModeloSillon bms ON fp.modelo_sillon_id = bms.modelo_id
    LEFT JOIN DB_SQUAD.BI_Sucursal bs ON fp.sucursal_id = bs.sucursal_bi_id
    LEFT JOIN DB_SQUAD.BI_Ubicacion usuc ON bs.sucursal_provincia_nombre = usuc.provincia_nombre AND bs.sucursal_localidad_nombre = usuc.localidad_nombre
    LEFT JOIN DB_SQUAD.BI_Cliente bc ON fp.cliente_id = bc.cliente_bi_id
    LEFT JOIN DB_SQUAD.BI_RangoEtario bre ON bc.cliente_rango_etario_id = bre.rango_etario_id
    GROUP BY
        t.anio,
        t.cuatrimestre,
        usuc.localidad_nombre,
        bre.rango_etario_descripcion,
        bms.modelo_descripcion
)
SELECT
    anio,
    cuatrimestre,
    LocalidadSucursal,
    RangoEtarioCliente,
    ModeloSillon,
    CantidadVendida
FROM ModeloVentas
WHERE rn <= 3;
GO
PRINT 'Vista DB_SQUAD.BI_RendimientoModelosTop3 creada.';
GO

-- 4. Volumen de pedidos
CREATE VIEW DB_SQUAD.BI_VolumenPedidosPorTurnoSucursalMes AS
SELECT
    t.anio,
    t.mes,
    btv.turno_descripcion AS TurnoVentas,
    bs.sucursal_numero_maestra AS NumeroSucursal,
    SUM(fp.CantidadPedidos) AS CantidadPedidos
FROM DB_SQUAD.BI_FactPedidos fp
JOIN DB_SQUAD.BI_Tiempo t ON fp.tiempo_id = t.tiempo_id
LEFT JOIN DB_SQUAD.BI_TurnoVentas btv ON fp.turno_ventas_id = btv.turno_id
LEFT JOIN DB_SQUAD.BI_Sucursal bs ON fp.sucursal_id = bs.sucursal_bi_id
GROUP BY
    t.anio,
    t.mes,
    btv.turno_descripcion,
    bs.sucursal_numero_maestra;
GO
PRINT 'Vista DB_SQUAD.BI_VolumenPedidosPorTurnoSucursalMes creada.';
GO

-- 5. Conversión de pedidos
CREATE VIEW DB_SQUAD.BI_ConversionPedidosPorEstadoCuatrimestreSucursal AS
SELECT
    t.anio,
    t.cuatrimestre,
    bs.sucursal_numero_maestra AS NumeroSucursal,
    bep.estado_nombre AS EstadoPedido,
    CAST(SUM(fp.CantidadPedidos) AS DECIMAL(18,2)) * 100.0 / SUM(SUM(fp.CantidadPedidos)) OVER (PARTITION BY t.anio, t.cuatrimestre, bs.sucursal_numero_maestra) AS PorcentajePedidos
FROM DB_SQUAD.BI_FactPedidos fp
JOIN DB_SQUAD.BI_Tiempo t ON fp.tiempo_id = t.tiempo_id
LEFT JOIN DB_SQUAD.BI_EstadoPedido bep ON fp.estado_pedido_id = bep.estado_id
LEFT JOIN DB_SQUAD.BI_Sucursal bs ON fp.sucursal_id = bs.sucursal_bi_id
GROUP BY
    t.anio,
    t.cuatrimestre,
    bs.sucursal_numero_maestra,
    bep.estado_nombre;
GO
PRINT 'Vista DB_SQUAD.BI_ConversionPedidosPorEstadoCuatrimestreSucursal creada.';
GO

CREATE VIEW DB_SQUAD.BI_TiempoPromedioEntregaPorCuatrimestre AS
SELECT
    t.anio,
    t.cuatrimestre,
    AVG(fe.TiempoPromedioEntregaDias) AS TiempoPromedioDias
FROM DB_SQUAD.BI_FactEnvios fe
JOIN DB_SQUAD.BI_Tiempo t ON fe.tiempo_id = t.tiempo_id
GROUP BY
    t.anio,
    t.cuatrimestre;
GO
PRINT 'Vista DB_SQUAD.BI_TiempoPromedioEntregaPorCuatrimestre creada (adaptada).';
GO

-- 7. Promedio de Compras
CREATE VIEW DB_SQUAD.BI_PromedioComprasPorMes AS
SELECT
    t.anio,
    t.mes,
    AVG(fc.TotalEgresos) AS ImportePromedioCompras
FROM DB_SQUAD.BI_FactCompras fc
JOIN DB_SQUAD.BI_Tiempo t ON fc.tiempo_id = t.tiempo_id
GROUP BY
    t.anio,
    t.mes;
GO
PRINT 'Vista DB_SQUAD.BI_PromedioComprasPorMes creada.';
GO

-- 8. Compras por Tipo de Material
CREATE VIEW DB_SQUAD.BI_ComprasPorTipoMaterialProveedorCuatrimestre AS
SELECT
    t.anio,
    t.cuatrimestre,
    bp.proveedor_razon_social AS Proveedor,
    btm.tipo_material_descripcion AS TipoMaterial,
    SUM(fc.TotalEgresos) AS ImporteTotalGastado
FROM DB_SQUAD.BI_FactCompras fc
JOIN DB_SQUAD.BI_Tiempo t ON fc.tiempo_id = t.tiempo_id
LEFT JOIN DB_SQUAD.BI_TipoMaterial btm ON fc.tipo_material_id = btm.tipo_material_id
LEFT JOIN DB_SQUAD.BI_Proveedor bp ON fc.proveedor_id = bp.proveedor_bi_id
GROUP BY
    t.anio,
    t.cuatrimestre,
    bp.proveedor_razon_social,
    btm.tipo_material_descripcion;
GO
PRINT 'Vista DB_SQUAD.BI_ComprasPorTipoMaterialProveedorCuatrimestre creada (adaptada).';
GO

-- 9. Porcentaje de cumplimiento de envíos en los tiempos programados por mes.
CREATE VIEW DB_SQUAD.BI_PorcentajeCumplimientoEnvios AS
SELECT
    t.anio,
    t.mes,
    CAST(SUM(fe.CantidadEnviosCumplidos) AS DECIMAL(18,2)) * 100.0 / SUM(fe.CantidadEnvios) AS PorcentajeCumplimiento
FROM DB_SQUAD.BI_FactEnvios fe
JOIN DB_SQUAD.BI_Tiempo t ON fe.tiempo_id = t.tiempo_id
GROUP BY
    t.anio,
    t.mes;
GO
PRINT 'Vista DB_SQUAD.BI_PorcentajeCumplimientoEnvios creada.';
GO

-- 10. Localidades que pagan mayor costo de envío.
GO
PRINT 'Proceso de creación y migración del modelo BI completado.';
GO
