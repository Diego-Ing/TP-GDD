USE GD1C2025;
GO


IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'DBO_SQUAD')
BEGIN
    EXEC('CREATE SCHEMA DBO_SQUAD');
END
GO

-- Paso 1: Eliminar FOREIGN KEYS del esquema DBO_SQUAD
DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE [' + s.name + '].[' + t.name + '] DROP CONSTRAINT [' + fk.name + '];'
FROM sys.foreign_keys fk
JOIN sys.tables t ON fk.parent_object_id = t.object_id
JOIN sys.schemas s ON t.schema_id = s.schema_id
WHERE s.name = 'DBO_SQUAD';
EXEC sp_executesql @sql;
use GD1C2025
-- Paso 2: Eliminar tablas en orden lógico
DROP TABLE IF EXISTS DBO_SQUAD.DetalleFactura;
DROP TABLE IF EXISTS DBO_SQUAD.DetallePedido;
DROP TABLE IF EXISTS DBO_SQUAD.Modelo;
DROP TABLE IF EXISTS DBO_SQUAD.Medida;
DROP TABLE IF EXISTS DBO_SQUAD.Material;
DROP TABLE IF EXISTS DBO_SQUAD.Relleno;
DROP TABLE IF EXISTS DBO_SQUAD.Madera;
DROP TABLE IF EXISTS DBO_SQUAD.Tela;
DROP TABLE IF EXISTS DBO_SQUAD.Sillon;
DROP TABLE IF EXISTS DBO_SQUAD.ItemMaterial;
DROP TABLE IF EXISTS DBO_SQUAD.Compra;
DROP TABLE IF EXISTS DBO_SQUAD.ItemCompra;
DROP TABLE IF EXISTS DBO_SQUAD.ItemPedido;
DROP TABLE IF EXISTS DBO_SQUAD.Item;
DROP TABLE IF EXISTS DBO_SQUAD.ItemFactura;
DROP TABLE IF EXISTS DBO_SQUAD.Factura;
DROP TABLE IF EXISTS DBO_SQUAD.Pedido;
DROP TABLE IF EXISTS DBO_SQUAD.Cliente;
DROP TABLE IF EXISTS DBO_SQUAD.Empleado;
DROP TABLE IF EXISTS DBO_SQUAD.Sucursal;
DROP TABLE IF EXISTS DBO_SQUAD.Proveedor;
DROP TABLE IF EXISTS DBO_SQUAD.Producto;
DROP TABLE IF EXISTS DBO_SQUAD.Categoria;
DROP TABLE IF EXISTS DBO_SQUAD.Subcategoria;
DROP TABLE IF EXISTS DBO_SQUAD.EstadoPedido;
DROP TABLE IF EXISTS DBO_SQUAD.Envio;
DROP TABLE IF EXISTS DBO_SQUAD.Direccion;
DROP TABLE IF EXISTS DBO_SQUAD.Localidad;
DROP TABLE IF EXISTS DBO_SQUAD.Provincia;


-- Provincia
CREATE TABLE DBO_SQUAD.Provincia (
    provincia_codigo INT IDENTITY(1,1) PRIMARY KEY,
    provincia_nombre NVARCHAR(255) NOT NULL UNIQUE
);

-- Localidad
CREATE TABLE DBO_SQUAD.Localidad (
    localidad_codigo INT IDENTITY(1,1) PRIMARY KEY,
    localidad_nombre NVARCHAR(255) NOT NULL UNIQUE,
    localidad_provincia INT NOT NULL FOREIGN KEY REFERENCES DBO_SQUAD.Provincia(provincia_codigo)
);

-- Direccion
CREATE TABLE DBO_SQUAD.Direccion (
    direccion_codigo INT IDENTITY(1,1) PRIMARY KEY,
    direccion_nombre NVARCHAR(255) NOT NULL,
    direccion_localidad INT NOT NULL FOREIGN KEY REFERENCES DBO_SQUAD.Localidad(localidad_codigo)
);

-- EstadoPedido
CREATE TABLE DBO_SQUAD.EstadoPedido (
    estado_id CHAR(1) PRIMARY KEY,
    estado_nombre VARCHAR(10)
);

-- Modelo
CREATE TABLE DBO_SQUAD.Modelo (
    modelo_codigo BIGINT PRIMARY KEY,
    modelo_descripcion NVARCHAR(100),
    modelo_precio_base DECIMAL(12,2)
);

-- Medida
CREATE TABLE DBO_SQUAD.Medida (
    medida_codigo INT IDENTITY(1,1) PRIMARY KEY, -- ¡CAMBIADO a IDENTITY!
    medida_alto DECIMAL(12,2),
    medida_ancho DECIMAL(12,2),
    medida_profundidad DECIMAL(12,2),
    medida_precio DECIMAL(12,2) -- Si el precio es parte de la "medida"
);

-- Material
CREATE TABLE DBO_SQUAD.Material (
    material_codigo INT IDENTITY(1,1) PRIMARY KEY,
    material_precio DECIMAL(12,2) NULL,
    material_descripcion NVARCHAR(50) NULL -- Asumo que Material_Descripcion/Nombre no serán > 50 chars
);

-- Relleno
CREATE TABLE DBO_SQUAD.Relleno (
    relleno_id INT IDENTITY(1,1) PRIMARY KEY,       -- ¡NUEVA CLAVE PRIMARIA!
    relleno_material INT NULL,                       -- ¡Ahora es una FK, no PK! Permitir NULL si no todos los rellenos tienen un material asignado.
    relleno_densidad DECIMAL(12,2) NULL,             -- ¡AJUSTADO A DECIMAL(12,2)!
    FOREIGN KEY (relleno_material) REFERENCES DBO_SQUAD.Material(material_codigo)
);

-- Madera
CREATE TABLE DBO_SQUAD.Madera (
    madera_id INT IDENTITY(1,1) PRIMARY KEY,       -- ¡NUEVA CLAVE PRIMARIA!
    madera_material INT NULL,                      -- ¡Ahora es una FK, no PK!
    madera_tipo NVARCHAR(10) NULL,                 -- Asumimos Madera_Color de la maestra
    madera_dureza NVARCHAR(10) NULL,
    FOREIGN KEY (madera_material) REFERENCES DBO_SQUAD.Material(material_codigo)
);

-- Tela
CREATE TABLE DBO_SQUAD.Tela (
    tela_id INT IDENTITY(1,1) PRIMARY KEY,       -- ¡NUEVA CLAVE PRIMARIA!
    tela_material INT NULL,                      -- ¡Ahora es una FK, no PK!
    tela_color NVARCHAR(10) NULL,
    tela_textura NVARCHAR(10) NULL,
    FOREIGN KEY (tela_material) REFERENCES DBO_SQUAD.Material(material_codigo)
);

-- Proveedor
CREATE TABLE DBO_SQUAD.Proveedor (
    proveedor_codigo CHAR(3) PRIMARY KEY,
    proveedor_direccion INT,
    proveedor_razon_social NVARCHAR(50),
    proveedor_telefono VARCHAR(20),
    proveedor_mail NVARCHAR(20),
    FOREIGN KEY (proveedor_direccion) REFERENCES DBO_SQUAD.Direccion(direccion_codigo)
);

-- Sucursal
CREATE TABLE DBO_SQUAD.Sucursal (
    sucursal_codigo CHAR(2) PRIMARY KEY,
    sucursal_direccion INT,
    sucursal_mail NVARCHAR(50),
    FOREIGN KEY (sucursal_direccion) REFERENCES DBO_SQUAD.Direccion(direccion_codigo)
);

-- Cliente
CREATE TABLE DBO_SQUAD.Cliente (
    Cliente_ID INT IDENTITY(1,1) PRIMARY KEY,
    Cliente_Dni NVARCHAR(20) NULL,           -- Deja como NVARCHAR para flexibilidad, convertiremos el origen
    Cliente_Nombre NVARCHAR(255),
    Cliente_Apellido NVARCHAR(255),
    Cliente_FechaNacimiento DATE,
    Cliente_Mail NVARCHAR(255),
    Cliente_Direccion NVARCHAR(255),
    Cliente_Telefono NVARCHAR(50),
    Cliente_Provincia NVARCHAR(255),
    Cliente_Localidad NVARCHAR(255)
);


-- Sillon
CREATE TABLE DBO_SQUAD.Sillon (
    sillon_codigo BIGINT PRIMARY KEY,
    sillon_modelo BIGINT,
    sillon_medidas INT,
    FOREIGN KEY (sillon_modelo) REFERENCES DBO_SQUAD.Modelo(modelo_codigo),
    FOREIGN KEY (sillon_medidas) REFERENCES DBO_SQUAD.Medida(medida_codigo)
);

-- ItemMaterial
CREATE TABLE DBO_SQUAD.ItemMaterial (
    item_material_sillon BIGINT,
    item_material_material INT,
    PRIMARY KEY (item_material_sillon, item_material_material),
    FOREIGN KEY (item_material_sillon) REFERENCES DBO_SQUAD.Sillon(sillon_codigo),
    FOREIGN KEY (item_material_material) REFERENCES DBO_SQUAD.Material(material_codigo)
);
-- Compra
CREATE TABLE DBO_SQUAD.Compra (
    compra_codigo CHAR(6) PRIMARY KEY,
    compra_proveedor CHAR(3),
    compra_fecha SMALLDATETIME,
    compra_total DECIMAL(12,2),
    FOREIGN KEY (compra_proveedor) REFERENCES DBO_SQUAD.Proveedor(proveedor_codigo)
);

-- ItemCompra
CREATE TABLE DBO_SQUAD.ItemCompra (
    item_compra_codigo CHAR(6),
    item_compra_material INT,
    item_compra_cantidad INT,
    PRIMARY KEY (item_compra_codigo, item_compra_material),
    FOREIGN KEY (item_compra_codigo) REFERENCES DBO_SQUAD.Compra(compra_codigo),
    FOREIGN KEY (item_compra_material) REFERENCES DBO_SQUAD.Material(material_codigo)
);

-- Pedido
CREATE TABLE DBO_SQUAD.Pedido (
    pedido_codigo CHAR(6) PRIMARY KEY,
    pedido_cliente INT,
    pedido_sucursal CHAR(2),
    pedido_estado CHAR(1),
    pedido_fecha SMALLDATETIME,
    pedido_total DECIMAL(12,2),
    FOREIGN KEY (pedido_cliente) REFERENCES DBO_SQUAD.Cliente(Cliente_ID),
    FOREIGN KEY (pedido_sucursal) REFERENCES DBO_SQUAD.Sucursal(sucursal_codigo),
    FOREIGN KEY (pedido_estado) REFERENCES DBO_SQUAD.EstadoPedido(estado_id)
);

-- ItemPedido
CREATE TABLE DBO_SQUAD.ItemPedido (
    item_pedido_codigo CHAR(6),
    item_pedido_sillon BIGINT,
    item_pedido_cantidad INT,
    PRIMARY KEY (item_pedido_codigo, item_pedido_sillon),
    FOREIGN KEY (item_pedido_codigo) REFERENCES DBO_SQUAD.Pedido(pedido_codigo),
    FOREIGN KEY (item_pedido_sillon) REFERENCES DBO_SQUAD.Sillon(sillon_codigo)
);

-- Factura
CREATE TABLE DBO_SQUAD.Factura (
    factura_codigo CHAR(6) PRIMARY KEY,
    factura_pedido CHAR(6),
    factura_fecha SMALLDATETIME,
    factura_total DECIMAL(12,2),
    FOREIGN KEY (factura_pedido) REFERENCES DBO_SQUAD.Pedido(pedido_codigo)
);

-- ItemFactura
CREATE TABLE DBO_SQUAD.ItemFactura (
    item_factura_codigo CHAR(6),
    item_factura_sillon BIGINT,
    item_factura_cantidad INT,
    PRIMARY KEY (item_factura_codigo, item_factura_sillon),
    FOREIGN KEY (item_factura_codigo) REFERENCES DBO_SQUAD.Factura(factura_codigo),
    FOREIGN KEY (item_factura_sillon) REFERENCES DBO_SQUAD.Sillon(sillon_codigo)
);

-- Envio
CREATE TABLE DBO_SQUAD.Envio (
    envio_codigo CHAR(6) PRIMARY KEY,
    envio_direccion INT,
    envio_fecha SMALLDATETIME,
    envio_factura CHAR(6),
    FOREIGN KEY (envio_direccion) REFERENCES DBO_SQUAD.Direccion(direccion_codigo),
    FOREIGN KEY (envio_factura) REFERENCES DBO_SQUAD.Factura(factura_codigo)
);

									-- MIGRACION DE PROVINCIA--
INSERT INTO DBO_SQUAD.Provincia (provincia_nombre)
SELECT DISTINCT ProvinciaNombre
FROM (
    SELECT Sucursal_Provincia AS ProvinciaNombre FROM gd_esquema.Maestra WHERE Sucursal_Provincia IS NOT NULL
    UNION
    SELECT Cliente_Provincia AS ProvinciaNombre FROM gd_esquema.Maestra WHERE Cliente_Provincia IS NOT NULL
    UNION
    SELECT Proveedor_Provincia AS ProvinciaNombre FROM gd_esquema.Maestra WHERE Proveedor_Provincia IS NOT NULL
) AS TodasLasProvincias
WHERE ProvinciaNombre IS NOT NULL;
PRINT 'Tabla DBO_SQUAD.Provincia creada y poblada.';

											-----------------------
										-- MIGRACION DE ESTADO_PEDIDO-- LISTO
INSERT INTO DBO_SQUAD.EstadoPedido (estado_id, estado_nombre)
VALUES
('E', 'ENTREGADO'), -- Ejemplo
('X', 'CANCELADO'); -- Ejemplo
PRINT 'Tabla DBO_SQUAD.EstadoPedido creada y poblada.';
										-----------------------
										-- MIGRACION DE MODELO -- LISTO
INSERT INTO DBO_SQUAD.Modelo (modelo_codigo, modelo_descripcion, modelo_precio_base)
SELECT DISTINCT
    Sillon_Modelo_Codigo, -- Insertar directamente el BIGINT
    Sillon_Modelo AS modelo_descripcion,
    Sillon_Modelo_Precio
FROM gd_esquema.Maestra
WHERE Sillon_Modelo_Codigo IS NOT NULL;
PRINT 'Tabla DBO_SQUAD.Modelo creada y poblada (AJUSTADO).';
											-----------------------
										-- MIGRACION DE MEDIDA -- LISTO
INSERT INTO DBO_SQUAD.Medida (medida_alto, medida_ancho, medida_profundidad, medida_precio)
SELECT DISTINCT
    Sillon_Medida_Alto,
    Sillon_Medida_Ancho,
    Sillon_Medida_Profundidad,
    Sillon_Medida_Precio
FROM gd_esquema.Maestra
WHERE
    Sillon_Medida_Alto IS NOT NULL
    OR Sillon_Medida_Ancho IS NOT NULL
    OR Sillon_Medida_Profundidad IS NOT NULL
    OR Sillon_Medida_Precio IS NOT NULL; 
PRINT 'Tabla DBO_SQUAD.Medida creada y poblada con IDENTITY.';
										---------------------------
										-- MIGRACION DE MATERIAL -- LISTO
-- 1.5 DBO_SQUAD.Material -- listo
INSERT INTO DBO_SQUAD.Material (material_precio, material_descripcion)
SELECT DISTINCT
    m.Material_Precio,
    COALESCE(m.Material_Descripcion, m.Material_Nombre)
FROM gd_esquema.Maestra m
WHERE
    COALESCE(m.Material_Descripcion, m.Material_Nombre) IS NOT NULL;
PRINT 'Tabla DBO_SQUAD.Material creada y poblada con IDENTITY.';
										---------------------------
										-- RELLENO -- LISTO
INSERT INTO DBO_SQUAD.Relleno (relleno_material, relleno_densidad)
SELECT DISTINCT
    mat.material_codigo,
    m.Relleno_Densidad
FROM gd_esquema.Maestra m
JOIN DBO_SQUAD.Material mat ON COALESCE(m.Material_Descripcion, m.Material_Nombre) = mat.material_descripcion
WHERE m.Material_Tipo = 'Relleno' -- Filtrar por tipo de material
  AND m.Relleno_Densidad IS NOT NULL;
PRINT 'Tabla DBO_SQUAD.Relleno creada y poblada.';
										---------------------------
										--MIGRACION DE MADERA -- LISTO
INSERT INTO DBO_SQUAD.Madera (madera_material, madera_tipo, madera_dureza)
SELECT DISTINCT
    mat.material_codigo,
    m.Madera_Color,
    m.Madera_Dureza
FROM gd_esquema.Maestra m
JOIN DBO_SQUAD.Material mat ON COALESCE(m.Material_Descripcion, m.Material_Nombre) = mat.material_descripcion
WHERE m.Material_Tipo = 'Madera'; -- Filtrar por tipo de material
PRINT 'Tabla DBO_SQUAD.Madera creada y poblada.';
										----------------------------
										--MIGRACION DE TELA-- LISTO
INSERT INTO DBO_SQUAD.Tela (tela_material, tela_color, tela_textura)
SELECT DISTINCT
    mat.material_codigo,
    m.Tela_Color,
    m.Tela_Textura
FROM gd_esquema.Maestra m
JOIN DBO_SQUAD.Material mat ON COALESCE(m.Material_Descripcion, m.Material_Nombre) = mat.material_descripcion
WHERE m.Material_Tipo = 'Tela'; -- Filtrar por tipo de material
PRINT 'Tabla DBO_SQUAD.Tela creada y poblada.';

										------------------------------
										-- MIGRACION DE CLIENTE -- LISTO
INSERT INTO DBO_SQUAD.Cliente (Cliente_Dni, Cliente_Nombre, Cliente_Apellido, Cliente_FechaNacimiento, Cliente_Mail, Cliente_Direccion, Cliente_Telefono, Cliente_Provincia, Cliente_Localidad)
SELECT
    Cliente_Dni_Final, -- Usamos el nombre de la columna generada en el CTE intermedio
    Cliente_Nombre,
    Cliente_Apellido,
    Cliente_FechaNacimiento,
    Cliente_Mail,
    Cliente_Direccion,
    Cliente_Telefono,
    Cliente_Provincia,
    Cliente_Localidad
FROM (
    -- CTE intermedio para calcular el ROW_NUMBER principal y el DNI ya casteado
    SELECT
        CAST(m.Cliente_Dni AS NVARCHAR(20)) AS Cliente_Dni_Final, -- Convertimos el DNI original a NVARCHAR aquí
        m.Cliente_Nombre,
        m.Cliente_Apellido,
        m.Cliente_FechaNacimiento,
        m.Cliente_Mail,
        m.Cliente_Direccion,
        m.Cliente_Telefono,
        m.Cliente_Provincia,
        m.Cliente_Localidad,
        -- Aplicamos el ROW_NUMBER() principal usando los valores particionados.
        -- Los valores para ISNULL se construyen con GlobalRowNum generado en el CTE anterior.
        ROW_NUMBER() OVER (
            PARTITION BY
                ISNULL(CAST(m.Cliente_Dni AS NVARCHAR(20)), 'NULL_DNI_' + CAST(m.GlobalRowNum AS NVARCHAR(20))),
                ISNULL(m.Cliente_Nombre, 'NULL_NOMBRE_' + CAST(m.GlobalRowNum AS NVARCHAR(20))),
                ISNULL(m.Cliente_Apellido, 'NULL_APELLIDO_' + CAST(m.GlobalRowNum AS NVARCHAR(20)))
            ORDER BY (SELECT NULL)
        ) as rn
    FROM (
        -- Primer CTE: Generamos un ROW_NUMBER global único para cada fila de la maestra.
        -- Esto es crucial para usarlo en las expresiones ISNULL sin anidar funciones de ventana.
        SELECT
            Cliente_Dni,
            Cliente_Nombre,
            Cliente_Apellido,
            Cliente_FechaNacimiento,
            Cliente_Mail,
            Cliente_Direccion,
            Cliente_Telefono,
            Cliente_Provincia,
            Cliente_Localidad,
            ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS GlobalRowNum
        FROM gd_esquema.Maestra
    ) AS m -- Alias para el CTE que contiene GlobalRowNum
) AS ClientesUnicosConRN
WHERE rn = 1; -- Filtramos para obtener solo la primera ocurrencia única de cada cliente

	-- MIGRO PEDIDO--
	--FALTAA--


-- Ver todas las provincias migradas
SELECT *
FROM DBO_SQUAD.Provincia
ORDER BY provincia_nombre;
USE GD1C2025;
GO

-- Cuántos clientes se migraron
SELECT COUNT(*) AS TotalClientesMigrados FROM DBO_SQUAD.Cliente;


