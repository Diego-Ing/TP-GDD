USE GD1C2025;
GO


IF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'DB_SQUAD')
BEGIN
    EXEC('CREATE SCHEMA DB_SQUAD');
END
GO

-- Paso 1: Eliminar FOREIGN KEYS del esquema DB_SQUAD
DECLARE @sql NVARCHAR(MAX) = '';
SELECT @sql += 'ALTER TABLE [' + s.name + '].[' + t.name + '] DROP CONSTRAINT [' + fk.name + '];'
FROM sys.foreign_keys fk
JOIN sys.tables t ON fk.parent_object_id = t.object_id
JOIN sys.schemas s ON t.schema_id = s.schema_id
WHERE s.name = 'DB_SQUAD';
EXEC sp_executesql @sql;
use GD1C2025
-- Paso 2: Eliminar tablas en orden lógico
DROP TABLE IF EXISTS DB_SQUAD.DetalleFactura;
DROP TABLE IF EXISTS DB_SQUAD.DetallePedido;
DROP TABLE IF EXISTS DB_SQUAD.Modelo;
DROP TABLE IF EXISTS DB_SQUAD.Medida;
DROP TABLE IF EXISTS DB_SQUAD.Material;
DROP TABLE IF EXISTS DB_SQUAD.Relleno;
DROP TABLE IF EXISTS DB_SQUAD.Madera;
DROP TABLE IF EXISTS DB_SQUAD.Tela;
DROP TABLE IF EXISTS DB_SQUAD.Sillon;
DROP TABLE IF EXISTS DB_SQUAD.ItemMaterial;
DROP TABLE IF EXISTS DB_SQUAD.Compra;
DROP TABLE IF EXISTS DB_SQUAD.ItemCompra;
DROP TABLE IF EXISTS DB_SQUAD.ItemPedido;
DROP TABLE IF EXISTS DB_SQUAD.Item;
DROP TABLE IF EXISTS DB_SQUAD.ItemFactura;
DROP TABLE IF EXISTS DB_SQUAD.Factura;
DROP TABLE IF EXISTS DB_SQUAD.Pedido;
DROP TABLE IF EXISTS DB_SQUAD.Cliente;
DROP TABLE IF EXISTS DB_SQUAD.Empleado;
DROP TABLE IF EXISTS DB_SQUAD.Sucursal;
DROP TABLE IF EXISTS DB_SQUAD.Proveedor;
DROP TABLE IF EXISTS DB_SQUAD.Producto;
DROP TABLE IF EXISTS DB_SQUAD.Categoria;
DROP TABLE IF EXISTS DB_SQUAD.Subcategoria;
DROP TABLE IF EXISTS DB_SQUAD.EstadoPedido;
DROP TABLE IF EXISTS DB_SQUAD.Envio;
DROP TABLE IF EXISTS DB_SQUAD.Direccion;
DROP TABLE IF EXISTS DB_SQUAD.Localidad;
DROP TABLE IF EXISTS DB_SQUAD.Provincia;


-- Provincia
CREATE TABLE DB_SQUAD.Provincia (
    provincia_codigo INT IDENTITY(1,1) PRIMARY KEY,
    provincia_nombre NVARCHAR(255) NOT NULL UNIQUE
);

-- Localidad
CREATE TABLE DB_SQUAD.Localidad (
    localidad_codigo INT IDENTITY(1,1) PRIMARY KEY,
    localidad_provincia INT NOT NULL, -- FK a DB_SQUAD.Provincia
    localidad_nombre NVARCHAR(255) NOT NULL,
    FOREIGN KEY (localidad_provincia) REFERENCES DB_SQUAD.Provincia(provincia_codigo),
    CONSTRAINT UQ_Localidad_Nombre_Provincia UNIQUE (localidad_nombre, localidad_provincia) -- Para evitar duplicados lógicos
);

-- Direccion
CREATE TABLE DB_SQUAD.Direccion (
    direccion_codigo INT IDENTITY(1,1) PRIMARY KEY,
    direccion_localidad INT NOT NULL, -- FK a DB_SQUAD.Localidad
    direccion_nombre NVARCHAR(255) NOT NULL,
    FOREIGN KEY (direccion_localidad) REFERENCES DB_SQUAD.Localidad(localidad_codigo),
    CONSTRAINT UQ_Direccion_Nombre_Localidad UNIQUE (direccion_nombre, direccion_localidad) -- Para evitar duplicados lógicos
);

-- EstadoPedido
CREATE TABLE DB_SQUAD.EstadoPedido (
    estado_id CHAR(1) PRIMARY KEY,
    estado_nombre VARCHAR(10)
);

-- Modelo
CREATE TABLE DB_SQUAD.Modelo (
    modelo_codigo BIGINT PRIMARY KEY,
    modelo_descripcion NVARCHAR(100),
    modelo_precio_base DECIMAL(12,2)
);

-- Medida
CREATE TABLE DB_SQUAD.Medida (
    medida_codigo INT IDENTITY(1,1) PRIMARY KEY, 
    medida_alto DECIMAL(12,2),
    medida_ancho DECIMAL(12,2),
    medida_profundidad DECIMAL(12,2),
    medida_precio DECIMAL(12,2) -- Si el precio es parte de la "medida"
);

-- Material
CREATE TABLE DB_SQUAD.Material (
    material_codigo INT IDENTITY(1,1) PRIMARY KEY,
    material_precio DECIMAL(12,2) NULL,
    material_descripcion NVARCHAR(50) NULL -- Asumo que Material_Descripcion/Nombre no serán > 50 chars
);

-- Relleno
CREATE TABLE DB_SQUAD.Relleno (
    relleno_id INT IDENTITY(1,1) PRIMARY KEY,      
    relleno_material INT NULL,                      
    relleno_densidad DECIMAL(12,2) NULL,           
    FOREIGN KEY (relleno_material) REFERENCES DB_SQUAD.Material(material_codigo)
);

-- Madera
CREATE TABLE DB_SQUAD.Madera (
    madera_id INT IDENTITY(1,1) PRIMARY KEY,      
    madera_material INT NULL,                     
    madera_tipo NVARCHAR(10) NULL,                 -- Asumimos Madera_Color de la maestra
    madera_dureza NVARCHAR(10) NULL,
    FOREIGN KEY (madera_material) REFERENCES DB_SQUAD.Material(material_codigo)
);

-- Tela
CREATE TABLE DB_SQUAD.Tela (
    tela_id INT IDENTITY(1,1) PRIMARY KEY,       
    tela_material INT NULL,                      -- ¡Ahora es una FK, no PK!
    tela_color NVARCHAR(10) NULL,
    tela_textura NVARCHAR(10) NULL,
    FOREIGN KEY (tela_material) REFERENCES DB_SQUAD.Material(material_codigo)
);

-- Proveedor
CREATE TABLE DB_SQUAD.Proveedor (
    proveedor_id INT IDENTITY(1,1) PRIMARY KEY, -- La clave primaria preferida
    proveedor_cuit NVARCHAR(20) NOT NULL,      -- El identificador de negocio
    proveedor_razon_social NVARCHAR(255) NULL,
    proveedor_telefono NVARCHAR(50) NULL,
    proveedor_direccion NVARCHAR(255) NULL,
    proveedor_localidad INT NULL,
    proveedor_provincia INT NULL,
    -- Asegura que cada combinación de atributos de proveedor (incluyendo CUIT) sea única
    CONSTRAINT UQ_Proveedor_Datos UNIQUE (proveedor_cuit, proveedor_razon_social, proveedor_telefono, proveedor_direccion, proveedor_localidad, proveedor_provincia),
    FOREIGN KEY (proveedor_localidad) REFERENCES DB_SQUAD.Localidad(localidad_codigo),
    FOREIGN KEY (proveedor_provincia) REFERENCES DB_SQUAD.Provincia(provincia_codigo)
);

-- Sucursal
CREATE TABLE DB_SQUAD.Sucursal (
    sucursal_id INT IDENTITY(1,1) PRIMARY KEY, -- Nueva clave primaria IDENTITY
    sucursal_numero_maestra BIGINT NULL,       -- Columna para el Sucursal_NroSucursal de la maestra
    sucursal_direccion INT NULL,
    sucursal_mail NVARCHAR(50) NULL,
    FOREIGN KEY (sucursal_direccion) REFERENCES DB_SQUAD.Direccion(direccion_codigo)
);

-- Cliente
CREATE TABLE DB_SQUAD.Cliente (
    Cliente_ID INT IDENTITY(1,1) PRIMARY KEY,
    Cliente_Dni NVARCHAR(20) NULL,           -- Deja como NVARCHAR para flexibilidad, convertiremos el origen
    Cliente_Nombre NVARCHAR(255),
    Cliente_Apellido NVARCHAR(255),
    Cliente_FechaNacimiento DATE,
    Cliente_Mail NVARCHAR(255),
    Cliente_Direccion NVARCHAR(255),
    Cliente_Telefono NVARCHAR(50),
    Cliente_Provincia NVARCHAR(255),
    Cliente_Localidad NVARCHAR(255)
);


-- Sillon
CREATE TABLE DB_SQUAD.Sillon (
    sillon_id INT IDENTITY(1,1) PRIMARY KEY,
    sillon_codigo_maestra BIGINT NOT NULL,
    sillon_modelo BIGINT,
    sillon_medidas INT,
    CONSTRAINT UQ_Sillon_Combinacion UNIQUE (sillon_codigo_maestra, sillon_modelo, sillon_medidas),
    FOREIGN KEY (sillon_modelo) REFERENCES DB_SQUAD.Modelo(modelo_codigo),
    FOREIGN KEY (sillon_medidas) REFERENCES DB_SQUAD.Medida(medida_codigo)
);

-- ItemMaterial
CREATE TABLE DB_SQUAD.ItemMaterial (
    item_material_sillon INT,
    item_material_material INT,
    PRIMARY KEY (item_material_sillon, item_material_material),
    FOREIGN KEY (item_material_sillon) REFERENCES DB_SQUAD.Sillon(sillon_id),
    FOREIGN KEY (item_material_material) REFERENCES DB_SQUAD.Material(material_codigo)
);
-- Compra
CREATE TABLE DB_SQUAD.Compra (
    compra_codigo BIGINT PRIMARY KEY,
    compra_fecha DATETIME NULL,
    compra_proveedor INT NULL,
    compra_total DECIMAL(12,2) NULL,
    FOREIGN KEY (compra_proveedor) REFERENCES DB_SQUAD.Proveedor(proveedor_id)
);

-- ItemCompra
CREATE TABLE DB_SQUAD.ItemCompra (
    item_compra_id INT IDENTITY(1,1) PRIMARY KEY, 
    item_compra_codigo BIGINT NOT NULL,          -- FK a DB_SQUAD.Compra.compra_codigo
    item_compra_sillon INT NULL,                 -- FK a DB_SQUAD.Sillon.sillon_id (Acepta NULLs)
    item_compra_cantidad INT NULL,
    item_compra_precio_unitario DECIMAL(12,2) NULL,
    item_compra_subtotal DECIMAL(12,2) NULL,
    FOREIGN KEY (item_compra_codigo) REFERENCES DB_SQUAD.Compra(compra_codigo),
    FOREIGN KEY (item_compra_sillon) REFERENCES DB_SQUAD.Sillon(sillon_id) -- Se mantiene la FK para futuros datos
);

-- Pedido
CREATE TABLE DB_SQUAD.Pedido (
    pedido_codigo BIGINT PRIMARY KEY,
    pedido_sucursal INT,                 -- FK a DB_SQUAD.Sucursal.sucursal_id (IDENTITY)
    pedido_cliente INT,         
    pedido_fecha DATETIME NOT NULL,
    pedido_total DECIMAL(12,2) NOT NULL,
    pedido_estado CHAR(1),
    FOREIGN KEY (pedido_sucursal) REFERENCES DB_SQUAD.Sucursal(sucursal_id),
    FOREIGN KEY (pedido_cliente) REFERENCES DB_SQUAD.Cliente(Cliente_ID), -- Referencia a Cliente.Cliente_Dni
    FOREIGN KEY (pedido_estado) REFERENCES DB_SQUAD.EstadoPedido(estado_id)
);

-- ItemPedido
CREATE TABLE DB_SQUAD.ItemPedido (
    item_pedido_codigo BIGINT,
    item_pedido_sillon INT,
    item_pedido_cantidad INT,
    PRIMARY KEY (item_pedido_codigo, item_pedido_sillon),
    FOREIGN KEY (item_pedido_codigo) REFERENCES DB_SQUAD.Pedido(pedido_codigo),
    FOREIGN KEY (item_pedido_sillon) REFERENCES DB_SQUAD.Sillon(sillon_id) 
);

-- Factura
CREATE TABLE DB_SQUAD.Factura (
    factura_codigo BIGINT PRIMARY KEY,
    fact_fecha DATETIME2(6) NULL,
    fact_total DECIMAL(18,2) NULL
);

-- ItemFactura
CREATE TABLE DB_SQUAD.ItemFactura (
    item_fact_id INT IDENTITY(1,1) PRIMARY KEY,
    item_fact_codigo BIGINT NOT NULL,           -- FK a DB_SQUAD.Factura.factura_codigo
    item_fact_sillon INT NULL,                  -- Permanece NULLable (no hay datos en Maestra para vincular)
    item_fact_precio DECIMAL(18,2) NULL,       
    item_fact_cantidad INT NULL,               
    item_fact_subtotal DECIMAL(18,2) NULL,     
    FOREIGN KEY (item_fact_codigo) REFERENCES DB_SQUAD.Factura(factura_codigo),
    FOREIGN KEY (item_fact_sillon) REFERENCES DB_SQUAD.Sillon(sillon_id)
);

-- Envio
CREATE TABLE DB_SQUAD.Envio (
    envio_id INT IDENTITY(1,1) PRIMARY KEY,
    envio_codigo DECIMAL(18,0) UNIQUE,
    envio_factura BIGINT NOT NULL, -- Asumo que un envío siempre está asociado a una factura
    envio_fecha_programada DATETIME2(6) NULL,
    envio_fecha_entrega DATETIME2(6) NULL,
    envio_importe_traslado DECIMAL(18,2) NULL,
    envio_importe_subida DECIMAL(18,2) NULL,
    envio_total DECIMAL(18,2) NULL,
    FOREIGN KEY (envio_factura) REFERENCES DB_SQUAD.Factura(factura_codigo)
);

									-- MIGRACION DE PROVINCIA--
INSERT INTO DB_SQUAD.Provincia (provincia_nombre)
SELECT DISTINCT ProvinciaNombre
FROM (
    SELECT Sucursal_Provincia AS ProvinciaNombre FROM gd_esquema.Maestra WHERE Sucursal_Provincia IS NOT NULL
    UNION
    SELECT Cliente_Provincia AS ProvinciaNombre FROM gd_esquema.Maestra WHERE Cliente_Provincia IS NOT NULL
    UNION
    SELECT Proveedor_Provincia AS ProvinciaNombre FROM gd_esquema.Maestra WHERE Proveedor_Provincia IS NOT NULL
) AS TodasLasProvincias
WHERE ProvinciaNombre IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Provincia creada y poblada.';

											----------------------
											-- MIGRACION DE LOCALIDAD --- LISTO
INSERT INTO DB_SQUAD.Localidad (localidad_nombre, localidad_provincia)
SELECT DISTINCT
    COALESCE(m.Sucursal_Localidad, m.Cliente_Localidad, m.Proveedor_Localidad) AS LocalidadNombre,
    prov.provincia_codigo
FROM gd_esquema.Maestra m
JOIN DB_SQUAD.Provincia prov ON COALESCE(m.Sucursal_Provincia, m.Cliente_Provincia, m.Proveedor_Provincia) = prov.provincia_nombre
WHERE COALESCE(m.Sucursal_Localidad, m.Cliente_Localidad, m.Proveedor_Localidad) IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Localidad creada y poblada.';
												----------------------
											-- MIGRACION DE DIRECCION --- LISTO
INSERT INTO DB_SQUAD.Direccion (direccion_nombre, direccion_localidad)
SELECT DISTINCT
    COALESCE(m.Sucursal_Direccion, m.Cliente_Direccion, m.Proveedor_Direccion) AS DireccionNombre,
    loc.localidad_codigo
FROM gd_esquema.Maestra m
JOIN DB_SQUAD.Localidad loc ON COALESCE(m.Sucursal_Localidad, m.Cliente_Localidad, m.Proveedor_Localidad) = loc.localidad_nombre
                                AND COALESCE(m.Sucursal_Provincia, m.Cliente_Provincia, m.Proveedor_Provincia) = (SELECT provincia_nombre FROM DB_SQUAD.Provincia WHERE provincia_codigo = loc.localidad_provincia)
WHERE COALESCE(m.Sucursal_Direccion, m.Cliente_Direccion, m.Proveedor_Direccion) IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Direccion creada y poblada.';

											-----------------------
										-- MIGRACION DE SUCURSAL-- LISTO
INSERT INTO DB_SQUAD.Sucursal (sucursal_numero_maestra, sucursal_direccion, sucursal_mail)
SELECT DISTINCT
    m.Sucursal_NroSucursal, 
    dir.direccion_codigo,
    m.Sucursal_Mail
FROM gd_esquema.Maestra m
JOIN DB_SQUAD.Provincia prov ON UPPER(TRIM(m.Sucursal_Provincia)) = UPPER(TRIM(prov.provincia_nombre))
JOIN DB_SQUAD.Localidad loc ON UPPER(TRIM(m.Sucursal_Localidad)) = UPPER(TRIM(loc.localidad_nombre)) AND loc.localidad_provincia = prov.provincia_codigo
JOIN DB_SQUAD.Direccion dir ON UPPER(TRIM(m.Sucursal_Direccion)) = UPPER(TRIM(dir.direccion_nombre)) AND dir.direccion_localidad = loc.localidad_codigo
WHERE m.Sucursal_NroSucursal IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Sucursal creada y poblada (con IDENTITY PK).';

											-----------------------
										-- MIGRACION DE ESTADO_PEDIDO-- LISTO
INSERT INTO DB_SQUAD.EstadoPedido (estado_id, estado_nombre)
VALUES
('E', 'ENTREGADO'), -- Ejemplo
('X', 'CANCELADO'), -- Ejemplo
('N', 'NULL');
PRINT 'Tabla DB_SQUAD.EstadoPedido creada y poblada.';
										-----------------------
										-- MIGRACION DE MODELO -- LISTO
INSERT INTO DB_SQUAD.Modelo (modelo_codigo, modelo_descripcion, modelo_precio_base)
SELECT DISTINCT
    CAST(m.Sillon_Modelo_Codigo AS BIGINT), -- ¡USAMOS LA COLUMNA CORRECTA!
    LEFT(m.Sillon_Modelo_Descripcion, 100), 
    CAST(m.Sillon_Modelo_Precio AS DECIMAL(12,2))
FROM gd_esquema.Maestra m
WHERE
    m.Sillon_Modelo_Codigo IS NOT NULL
    AND m.Sillon_Modelo_Descripcion IS NOT NULL
    AND m.Sillon_Modelo_Precio IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Modelo creada y poblada.';
											-----------------------
										-- MIGRACION DE MEDIDA -- LISTO
INSERT INTO DB_SQUAD.Medida (medida_alto, medida_ancho, medida_profundidad, medida_precio)
SELECT DISTINCT
    Sillon_Medida_Alto,
    Sillon_Medida_Ancho,
    Sillon_Medida_Profundidad,
    Sillon_Medida_Precio
FROM gd_esquema.Maestra
WHERE
    Sillon_Medida_Alto IS NOT NULL
    OR Sillon_Medida_Ancho IS NOT NULL
    OR Sillon_Medida_Profundidad IS NOT NULL
    OR Sillon_Medida_Precio IS NOT NULL; 
PRINT 'Tabla DB_SQUAD.Medida creada y poblada con IDENTITY.';
										---------------------------
										-- MIGRACION DE SILLON -- LISTO
INSERT INTO DB_SQUAD.Sillon (sillon_codigo_maestra, sillon_modelo, sillon_medidas)
SELECT DISTINCT
    CAST(m.Sillon_Codigo AS BIGINT),
    mod.modelo_codigo,
    med.medida_codigo
FROM gd_esquema.Maestra m
JOIN DB_SQUAD.Modelo mod ON CAST(m.Sillon_Modelo_Codigo AS BIGINT) = mod.modelo_codigo
JOIN DB_SQUAD.Medida med ON CAST(m.Sillon_Medida_Alto AS DECIMAL(12,2)) = med.medida_alto
                           AND CAST(m.Sillon_Medida_Ancho AS DECIMAL(12,2)) = med.medida_ancho
                           AND CAST(m.Sillon_Medida_Profundidad AS DECIMAL(12,2)) = med.medida_profundidad
                           AND CAST(m.Sillon_Medida_Precio AS DECIMAL(12,2)) = med.medida_precio
WHERE
    m.Sillon_Codigo IS NOT NULL
    AND m.Sillon_Modelo_Codigo IS NOT NULL
    AND m.Sillon_Medida_Alto IS NOT NULL
    AND m.Sillon_Medida_Ancho IS NOT NULL
    AND m.Sillon_Medida_Profundidad IS NOT NULL
    AND m.Sillon_Medida_Precio IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Sillon creada y poblada (con UNIQUE CONSTRAINT).'
										---------------------------
										-- MIGRACION DE MATERIAL -- LISTO
-- 1.5 DB_SQUAD.Material -- listo
INSERT INTO DB_SQUAD.Material (material_precio, material_descripcion)
SELECT DISTINCT
    m.Material_Precio,
    COALESCE(m.Material_Descripcion, m.Material_Nombre)
FROM gd_esquema.Maestra m
WHERE
    COALESCE(m.Material_Descripcion, m.Material_Nombre) IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Material creada y poblada con IDENTITY.';
										---------------------------
										-- RELLENO -- LISTO
INSERT INTO DB_SQUAD.Relleno (relleno_material, relleno_densidad)
SELECT DISTINCT
    mat.material_codigo,
    m.Relleno_Densidad
FROM gd_esquema.Maestra m
JOIN DB_SQUAD.Material mat ON COALESCE(m.Material_Descripcion, m.Material_Nombre) = mat.material_descripcion
WHERE m.Material_Tipo = 'Relleno' -- Filtrar por tipo de material
  AND m.Relleno_Densidad IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Relleno creada y poblada.';
										---------------------------
										--MIGRACION DE MADERA -- LISTO
INSERT INTO DB_SQUAD.Madera (madera_material, madera_tipo, madera_dureza)
SELECT DISTINCT
    mat.material_codigo,
    m.Madera_Color,
    m.Madera_Dureza
FROM gd_esquema.Maestra m
JOIN DB_SQUAD.Material mat ON COALESCE(m.Material_Descripcion, m.Material_Nombre) = mat.material_descripcion
WHERE m.Material_Tipo = 'Madera'; -- Filtrar por tipo de material
PRINT 'Tabla DB_SQUAD.Madera creada y poblada.';
										----------------------------
										--MIGRACION DE TELA-- LISTO
INSERT INTO DB_SQUAD.Tela (tela_material, tela_color, tela_textura)
SELECT DISTINCT
    mat.material_codigo,
    m.Tela_Color,
    m.Tela_Textura
FROM gd_esquema.Maestra m
JOIN DB_SQUAD.Material mat ON COALESCE(m.Material_Descripcion, m.Material_Nombre) = mat.material_descripcion
WHERE m.Material_Tipo = 'Tela'; -- Filtrar por tipo de material
PRINT 'Tabla DB_SQUAD.Tela creada y poblada.';
								----------------------------
										--MIGRACION ITEM MATERIAL-- LISTO

INSERT INTO DB_SQUAD.ItemMaterial (item_material_sillon, item_material_material)
SELECT DISTINCT
    s.sillon_id AS ItemMaterialSillon,
    mat.material_codigo AS ItemMaterialMaterial
FROM gd_esquema.Maestra m
-- JOIN a DB_SQUAD.Sillon para obtener el sillon_id
JOIN DB_SQUAD.Sillon s ON CAST(m.Sillon_Codigo AS BIGINT) = s.sillon_codigo_maestra
                         AND CAST(m.Sillon_Modelo_Codigo AS BIGINT) = s.sillon_modelo
                         AND s.sillon_medidas = (SELECT medida_codigo FROM DB_SQUAD.Medida WHERE
                                                medida_alto = CAST(m.Sillon_Medida_Alto AS DECIMAL(12,2))
                                            AND medida_ancho = CAST(m.Sillon_Medida_Ancho AS DECIMAL(12,2))
                                            AND medida_profundidad = CAST(m.Sillon_Medida_Profundidad AS DECIMAL(12,2))
                                            AND medida_precio = CAST(m.Sillon_Medida_Precio AS DECIMAL(12,2))
                                            )
-- JOIN a DB_SQUAD.Material para obtener el material_codigo genérico
JOIN DB_SQUAD.Material mat ON CAST(m.Material_Precio AS DECIMAL(12,2)) = mat.material_precio
                            AND LEFT(m.Material_Descripcion, 50) = mat.material_descripcion
WHERE
    m.Sillon_Codigo IS NOT NULL
    AND m.Material_Precio IS NOT NULL -- Solo para los Materiales que pudimos crear
    AND m.Material_Descripcion IS NOT NULL
    AND m.Sillon_Modelo_Codigo IS NOT NULL
    AND m.Sillon_Medida_Alto IS NOT NULL
    AND m.Sillon_Medida_Ancho IS NOT NULL
    AND m.Sillon_Medida_Profundidad IS NOT NULL
    AND m.Sillon_Medida_Precio IS NOT NULL;
PRINT 'Tabla DB_SQUAD.ItemMaterial creada y poblada.';


										------------------------------
										-- MIGRACION DE CLIENTE -- LISTO
INSERT INTO DB_SQUAD.Cliente (Cliente_Dni, Cliente_Nombre, Cliente_Apellido, Cliente_FechaNacimiento, Cliente_Mail, Cliente_Direccion, Cliente_Telefono, Cliente_Provincia, Cliente_Localidad)
SELECT
    Cliente_Dni_Final, -- Usamos el nombre de la columna generada en el CTE intermedio
    Cliente_Nombre,
    Cliente_Apellido,
    Cliente_FechaNacimiento,
    Cliente_Mail,
    Cliente_Direccion,
    Cliente_Telefono,
    Cliente_Provincia,
    Cliente_Localidad
FROM (
    -- CTE intermedio para calcular el ROW_NUMBER principal y el DNI ya casteado
    SELECT
        CAST(m.Cliente_Dni AS NVARCHAR(20)) AS Cliente_Dni_Final, -- Convertimos el DNI original a NVARCHAR 
        m.Cliente_Nombre,
        m.Cliente_Apellido,
        m.Cliente_FechaNacimiento,
        m.Cliente_Mail,
        m.Cliente_Direccion,
        m.Cliente_Telefono,
        m.Cliente_Provincia,
        m.Cliente_Localidad,
        -- Aplicamos el ROW_NUMBER() principal usando los valores particionados.
        -- Los valores para ISNULL se construyen con GlobalRowNum generado en el CTE anterior.
        ROW_NUMBER() OVER (
            PARTITION BY
                ISNULL(CAST(m.Cliente_Dni AS NVARCHAR(20)), 'NULL_DNI_' + CAST(m.GlobalRowNum AS NVARCHAR(20))),
                ISNULL(m.Cliente_Nombre, 'NULL_NOMBRE_' + CAST(m.GlobalRowNum AS NVARCHAR(20))),
                ISNULL(m.Cliente_Apellido, 'NULL_APELLIDO_' + CAST(m.GlobalRowNum AS NVARCHAR(20)))
            ORDER BY (SELECT NULL)
        ) as rn
    FROM (
        -- Primer CTE: Generamos un ROW_NUMBER global único para cada fila de la maestra.
        SELECT
            Cliente_Dni,
            Cliente_Nombre,
            Cliente_Apellido,
            Cliente_FechaNacimiento,
            Cliente_Mail,
            Cliente_Direccion,
            Cliente_Telefono,
            Cliente_Provincia,
            Cliente_Localidad,
            ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS GlobalRowNum
        FROM gd_esquema.Maestra
    ) AS m -- Alias para el CTE que contiene GlobalRowNum
) AS ClientesUnicosConRN
WHERE rn = 1; -- Filtramos para obtener solo la primera ocurrencia única de cada cliente
											
											------------------------------
													-- MIGRO PEDIDO--
INSERT INTO DB_SQUAD.Pedido (pedido_codigo, pedido_sucursal, pedido_cliente, pedido_fecha, pedido_total, pedido_estado)
SELECT DISTINCT
    CAST(m.Pedido_Numero AS BIGINT),
    suc.sucursal_id,
    cli.Cliente_ID,
    m.Pedido_Fecha,
    m.Pedido_Total,
    ep.estado_id 
FROM (
    SELECT
        *,
        ROW_NUMBER() OVER (ORDER BY (SELECT NULL)) AS GlobalRowNumMaestra
    FROM gd_esquema.Maestra
) AS m
JOIN (
    SELECT
        Cliente_ID,
        ISNULL(Cliente_Dni, 'NULL_DNI_' + CAST(Cliente_ID AS NVARCHAR(20))) AS Cliente_Dni_UniqueKey,
        ISNULL(Cliente_Nombre, 'NULL_NOMBRE_' + CAST(Cliente_ID AS NVARCHAR(20))) AS Cliente_Nombre_UniqueKey,
        ISNULL(Cliente_Apellido, 'NULL_APELLIDO_' + CAST(Cliente_ID AS NVARCHAR(20))) AS Cliente_Apellido_UniqueKey
    FROM DB_SQUAD.Cliente
) AS cli ON
    ISNULL(CAST(m.Cliente_Dni AS NVARCHAR(20)), 'NULL_DNI_' + CAST(m.GlobalRowNumMaestra AS NVARCHAR(20))) = cli.Cliente_Dni_UniqueKey
    AND ISNULL(m.Cliente_Nombre, 'NULL_NOMBRE_' + CAST(m.GlobalRowNumMaestra AS NVARCHAR(20))) = cli.Cliente_Nombre_UniqueKey
    AND ISNULL(m.Cliente_Apellido, 'NULL_APELLIDO_' + CAST(m.GlobalRowNumMaestra AS NVARCHAR(20))) = cli.Cliente_Apellido_UniqueKey
JOIN DB_SQUAD.EstadoPedido ep ON UPPER(TRIM(m.Pedido_Estado)) = UPPER(TRIM(ep.estado_nombre))
JOIN DB_SQUAD.Provincia prov ON UPPER(TRIM(m.Sucursal_Provincia)) = UPPER(TRIM(prov.provincia_nombre))
JOIN DB_SQUAD.Localidad loc ON UPPER(TRIM(m.Sucursal_Localidad)) = UPPER(TRIM(loc.localidad_nombre)) AND loc.localidad_provincia = prov.provincia_codigo
JOIN DB_SQUAD.Direccion dir ON UPPER(TRIM(m.Sucursal_Direccion)) = UPPER(TRIM(dir.direccion_nombre)) AND dir.direccion_localidad = loc.localidad_codigo
JOIN DB_SQUAD.Sucursal suc ON suc.sucursal_numero_maestra = m.Sucursal_NroSucursal
                             AND suc.sucursal_direccion = dir.direccion_codigo
                             AND suc.sucursal_mail = m.Sucursal_Mail
WHERE m.Pedido_Numero IS NOT NULL
  AND m.Cliente_Dni IS NOT NULL
  AND m.Pedido_Estado IS NOT NULL 
  AND m.Sucursal_NroSucursal IS NOT NULL;
PRINT 'Tabla DB_SQUAD.Pedido creada y poblada.';
										------------------------------
													-- MIGRO ItemPedido--
INSERT INTO DB_SQUAD.ItemPedido (item_pedido_codigo, item_pedido_sillon, item_pedido_cantidad)
SELECT DISTINCT
    CAST(m.Pedido_Numero AS BIGINT),
    s.sillon_id, -- Obtenemos el sillon_id
    CAST(m.Detalle_Pedido_Cantidad AS INT)
FROM gd_esquema.Maestra m
JOIN DB_SQUAD.Pedido p ON CAST(m.Pedido_Numero AS BIGINT) = p.pedido_codigo

JOIN DB_SQUAD.Sillon s ON CAST(m.Sillon_Codigo AS BIGINT) = s.sillon_codigo_maestra
                         AND CAST(m.Sillon_Modelo_Codigo AS BIGINT) = s.sillon_modelo
                         AND s.sillon_medidas = (SELECT medida_codigo FROM DB_SQUAD.Medida WHERE
                                                medida_alto = CAST(m.Sillon_Medida_Alto AS DECIMAL(12,2))
                                            AND medida_ancho = CAST(m.Sillon_Medida_Ancho AS DECIMAL(12,2))
                                            AND medida_profundidad = CAST(m.Sillon_Medida_Profundidad AS DECIMAL(12,2))
                                            AND medida_precio = CAST(m.Sillon_Medida_Precio AS DECIMAL(12,2))
                                            )
WHERE
    m.Pedido_Numero IS NOT NULL
    AND m.Sillon_Codigo IS NOT NULL
    AND m.Detalle_Pedido_Cantidad IS NOT NULL
    AND m.Sillon_Modelo_Codigo IS NOT NULL
    AND m.Sillon_Medida_Alto IS NOT NULL
    AND m.Sillon_Medida_Ancho IS NOT NULL
    AND m.Sillon_Medida_Profundidad IS NOT NULL
    AND m.Sillon_Medida_Precio IS NOT NULL;
PRINT 'Tabla DB_SQUAD.ItemPedido creada y poblada.';

											------------------------------
													-- MIGRO PROVEEDOR--

INSERT INTO DB_SQUAD.Proveedor (
    proveedor_cuit,
    proveedor_razon_social,
    proveedor_telefono,
    proveedor_direccion,
    proveedor_localidad,
    proveedor_provincia
)
SELECT DISTINCT

    LEFT(m.Proveedor_Cuit, 20),
    LEFT(m.Proveedor_RazonSocial, 255),
    LEFT(m.Proveedor_Telefono, 50),
    LEFT(m.Proveedor_Direccion, 255),

    loc.localidad_codigo,

    prov.provincia_codigo
FROM
    gd_esquema.Maestra m

LEFT JOIN DB_SQUAD.Provincia prov
    ON UPPER(TRIM(m.Proveedor_Provincia)) = UPPER(TRIM(prov.provincia_nombre))

LEFT JOIN DB_SQUAD.Localidad loc
    ON UPPER(TRIM(m.Proveedor_Localidad)) = UPPER(TRIM(loc.localidad_nombre))
    AND loc.localidad_provincia = prov.provincia_codigo 
WHERE
    m.Proveedor_Cuit IS NOT NULL; 

PRINT 'Tabla DB_SQUAD.Proveedor creada y poblada.';
									------------------------------
											-- MIGRO COMPRA--


INSERT INTO DB_SQUAD.Compra (compra_codigo, compra_fecha, compra_proveedor, compra_total)
SELECT DISTINCT
    CAST(m.Compra_Numero AS BIGINT),
    CAST(m.Compra_Fecha AS DATETIME),
    pr.proveedor_id,
    CAST(m.Compra_Total AS DECIMAL(12,2))
FROM
    gd_esquema.Maestra m

LEFT JOIN DB_SQUAD.Proveedor pr
    ON LEFT(m.Proveedor_Cuit, 20) = pr.proveedor_cuit
    AND LEFT(m.Proveedor_RazonSocial, 255) = pr.proveedor_razon_social
    AND LEFT(m.Proveedor_Telefono, 50) = pr.proveedor_telefono
    AND LEFT(m.Proveedor_Direccion, 255) = pr.proveedor_direccion

    AND pr.proveedor_localidad = (
        SELECT localidad_codigo
        FROM DB_SQUAD.Localidad l
        JOIN DB_SQUAD.Provincia p ON l.localidad_provincia = p.provincia_codigo
        WHERE UPPER(TRIM(l.localidad_nombre)) = UPPER(TRIM(m.Proveedor_Localidad))
          AND UPPER(TRIM(p.provincia_nombre)) = UPPER(TRIM(m.Proveedor_Provincia))
    )
    AND pr.proveedor_provincia = (
        SELECT provincia_codigo
        FROM DB_SQUAD.Provincia
        WHERE UPPER(TRIM(provincia_nombre)) = UPPER(TRIM(m.Proveedor_Provincia))
    )
WHERE
    m.Compra_Numero IS NOT NULL; 
PRINT 'Tabla DB_SQUAD.Compra creada y poblada.';
												------------------------------
													-- MIGRO ITEMCOMPRA--

INSERT INTO DB_SQUAD.ItemCompra (item_compra_codigo, item_compra_sillon, item_compra_cantidad, item_compra_precio_unitario, item_compra_subtotal)
SELECT DISTINCT
    CAST(m.Compra_Numero AS BIGINT),
    NULL AS item_compra_sillon, -- Siempre será NULL, porque no hay datos de sillón para vincular
    CAST(m.Detalle_Compra_Cantidad AS INT),
    CAST(m.Detalle_Compra_Precio AS DECIMAL(12,2)),
    CAST(m.Detalle_Compra_SubTotal AS DECIMAL(12,2))
FROM
    gd_esquema.Maestra m
WHERE
    m.Compra_Numero IS NOT NULL 
    AND m.Detalle_Compra_Cantidad IS NOT NULL 
    AND m.Detalle_Compra_Precio IS NOT NULL 
    AND m.Detalle_Compra_SubTotal IS NOT NULL; 

PRINT 'Tabla DB_SQUAD.ItemCompra creada y poblada (sin vinculación a Sillón).';
												------------------------------
													-- MIGRO FACTURA--


INSERT INTO DB_SQUAD.Factura (factura_codigo, fact_fecha, fact_total)
SELECT DISTINCT
    CAST(m.Factura_Numero AS BIGINT),
    CAST(m.Factura_Fecha AS DATETIME2(6)),
    CAST(m.Factura_Total AS DECIMAL(18,2))
FROM
    gd_esquema.Maestra m
WHERE
    m.Factura_Numero IS NOT NULL; -- Solo facturas con número
PRINT 'Tabla DB_SQUAD.Factura creada y poblada.';
											------------------------------
													-- MIGRO ENVIO--
	

INSERT INTO DB_SQUAD.Envio (envio_codigo, envio_factura, envio_fecha_programada, envio_fecha_entrega, envio_importe_traslado, envio_importe_subida, envio_total)
SELECT DISTINCT
    CAST(m.Envio_Numero AS DECIMAL(18,0)),
    CAST(m.Factura_Numero AS BIGINT), -- Vincula a la Factura
    CAST(m.Envio_Fecha_Programada AS DATETIME2(6)),
    CAST(m.Envio_Fecha AS DATETIME2(6)),
    CAST(m.Envio_ImporteTraslado AS DECIMAL(18,2)),
    CAST(m.Envio_ImporteSubida AS DECIMAL(18,2)),
    CAST(m.Envio_Total AS DECIMAL(18,2))
FROM
    gd_esquema.Maestra m
WHERE
    m.Envio_Numero IS NOT NULL; -- Solo si hay un número de envío
PRINT 'Tabla DB_SQUAD.Envio creada y poblada.';

												------------------------------
													-- MIGRO ITEMFACTURA--

INSERT INTO DB_SQUAD.ItemFactura (item_fact_codigo, item_fact_sillon, item_fact_precio, item_fact_cantidad, item_fact_subtotal)
SELECT DISTINCT
    CAST(m.Factura_Numero AS BIGINT),
    NULL AS item_fact_sillon, -- Siempre NULL si no hay datos de sillón en la Maestra para facturas
    CAST(m.Detalle_Factura_Precio AS DECIMAL(18,2)),
    CAST(m.Detalle_Factura_Cantidad AS INT),
    CAST(m.Detalle_Factura_SubTotal AS DECIMAL(18,2))
FROM
    gd_esquema.Maestra m
WHERE
    m.Factura_Numero IS NOT NULL
    AND (m.Detalle_Factura_Cantidad IS NOT NULL -- Al menos uno de estos campos debe tener un valor
         OR m.Detalle_Factura_Precio IS NOT NULL
         OR m.Detalle_Factura_SubTotal IS NOT NULL);
PRINT 'Tabla DB_SQUAD.ItemFactura creada y poblada.';

